// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: createBookmark.sql

package sqlc

import (
	"context"
)

const createBookmark = `-- name: CreateBookmark :exec
INSERT INTO bookmarks (user_id ,bookmarks_name, bookmarks_address, bookmarks_latitude, bookmarks_longitude, bookmarks_rating, bookmarks_price_level, bookmarks_trendkeyword, bookmarks_photourl, bookmarks_isrealdata) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateBookmarkParams struct {
	UserID                string  `json:"user_id"`
	BookmarksName         string  `json:"bookmarks_name"`
	BookmarksAddress      string  `json:"bookmarks_address"`
	BookmarksLatitude     float64 `json:"bookmarks_latitude"`
	BookmarksLongitude    float64 `json:"bookmarks_longitude"`
	BookmarksRating       float64 `json:"bookmarks_rating"`
	BookmarksPriceLevel   int32   `json:"bookmarks_price_level"`
	BookmarksTrendkeyword string  `json:"bookmarks_trendkeyword"`
	BookmarksPhotourl     string  `json:"bookmarks_photourl"`
	BookmarksIsrealdata   bool    `json:"bookmarks_isrealdata"`
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) error {
	_, err := q.db.ExecContext(ctx, createBookmark,
		arg.UserID,
		arg.BookmarksName,
		arg.BookmarksAddress,
		arg.BookmarksLatitude,
		arg.BookmarksLongitude,
		arg.BookmarksRating,
		arg.BookmarksPriceLevel,
		arg.BookmarksTrendkeyword,
		arg.BookmarksPhotourl,
		arg.BookmarksIsrealdata,
	)
	return err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmarks WHERE 
	user_id = ? AND
	bookmarks_address = ? AND
	bookmarks_latitude = ? AND
	bookmarks_longitude = ?
`

type DeleteBookmarkParams struct {
	UserID             string  `json:"user_id"`
	BookmarksAddress   string  `json:"bookmarks_address"`
	BookmarksLatitude  float64 `json:"bookmarks_latitude"`
	BookmarksLongitude float64 `json:"bookmarks_longitude"`
}

func (q *Queries) DeleteBookmark(ctx context.Context, arg DeleteBookmarkParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark,
		arg.UserID,
		arg.BookmarksAddress,
		arg.BookmarksLatitude,
		arg.BookmarksLongitude,
	)
	return err
}

const getBookmark = `-- name: GetBookmark :many
SELECT bookmarks_id, user_id, bookmarks_name, bookmarks_address, bookmarks_latitude, bookmarks_longitude, bookmarks_rating, bookmarks_price_level, bookmarks_trendkeyword, bookmarks_photourl, bookmarks_isrealdata FROM bookmarks WHERE user_id = ?
`

func (q *Queries) GetBookmark(ctx context.Context, userID string) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, getBookmark, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bookmark{}
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.BookmarksID,
			&i.UserID,
			&i.BookmarksName,
			&i.BookmarksAddress,
			&i.BookmarksLatitude,
			&i.BookmarksLongitude,
			&i.BookmarksRating,
			&i.BookmarksPriceLevel,
			&i.BookmarksTrendkeyword,
			&i.BookmarksPhotourl,
			&i.BookmarksIsrealdata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
